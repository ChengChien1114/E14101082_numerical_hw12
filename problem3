import numpy as np

# Domain settings
nr = 6                   # Δr = 0.1 → (1 - 0.5) / 0.1 = 5 intervals + 1 = 6
ntheta = 7               # Δθ = π/18 → (π/3) / (π/18) = 6 intervals + 1 = 7
r = np.linspace(0.5, 1.0, nr)
theta = np.linspace(0, np.pi/3, ntheta)
dr = r[1] - r[0]
dtheta = theta[1] - theta[0]

# Create solution array
T = np.zeros((nr, ntheta))

# Apply boundary conditions
T[0, :] = 50          # r = 0.5
T[-1, :] = 100        # r = 1
T[:, 0] = 0           # θ = 0
T[:, -1] = 0          # θ = π/3

# Iterative solver
tolerance = 1e-5
max_iter = 10000
iteration = 0
error = 1.0
T_new = T.copy()

while error > tolerance and iteration < max_iter:
    for i in range(1, nr - 1):
        ri = r[i]
        for j in range(1, ntheta - 1):
            T_new[i, j] = (
                (T[i+1, j] + T[i-1, j]) / dr**2 +
                (1/ri) * (T[i+1, j] - T[i-1, j]) / (2*dr) +
                (1/ri**2) * (T[i, j+1] + T[i, j-1]) / dtheta**2
            ) / (
                2 / dr**2 + 2 / (ri**2 * dtheta**2)
            )
    error = np.max(np.abs(T_new - T))
    T[:, :] = T_new
    iteration += 1

# Output result
print(f"\n=== T(r, θ) after {iteration} iterations ===")
for i in range(nr):
    for j in range(ntheta):
        print(f"T({r[i]:.2f}, {theta[j]:.2f}) = {T[i, j]:.6f}")
