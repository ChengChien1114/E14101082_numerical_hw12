import numpy as np

# ---- Tridiagonal solver (Thomas Algorithm) ----
def solve_tridiagonal(a, b, c, d):
    n = len(d)
    cp = c.copy()
    dp = d.copy()
    for i in range(1, n):
        m = a[i-1] / b[i-1]
        b[i] -= m * cp[i-1]
        dp[i] -= m * dp[i-1]
    x = np.zeros(n)
    x[-1] = dp[-1] / b[-1]
    for i in reversed(range(n-1)):
        x[i] = (dp[i] - cp[i] * x[i+1]) / b[i]
    return x

# ---- Problem setup ----
K = 0.1
dr = 0.1
dt = 0.5
r = np.arange(0.5, 1.0 + dr, dr)
t = np.arange(0, 10 + dt, dt)
nr = len(r)
nt = len(t)
alpha = K * dt / dr**2
T0 = 200 * (r - 0.5)

# ---- FORWARD METHOD ----
T_fwd = np.zeros((nt, nr))
T_fwd[0] = T0.copy()
for j in range(nt - 1):
    for i in range(1, nr - 1):
        ri = r[i]
        T_fwd[j+1, i] = T_fwd[j, i] + dt * K * (
            (T_fwd[j, i+1] - 2*T_fwd[j, i] + T_fwd[j, i-1]) / dr**2 +
            (1/ri) * (T_fwd[j, i+1] - T_fwd[j, i-1]) / (2*dr)
        )
    # Neumann BC at r=0.5
    T_fwd[j+1, 0] = T_fwd[j+1, 1] / (1 + 3 * dr)
    # Dirichlet BC at r=1
    T_fwd[j+1, -1] = 100 + 40 * t[j+1]

# ---- BACKWARD METHOD ----
T_bwd = np.zeros((nt, nr))
T_bwd[0] = T0.copy()
for j in range(nt - 1):
    a = np.zeros(nr - 1)
    b = np.zeros(nr)
    c = np.zeros(nr - 1)
    d = T_bwd[j].copy()
    for i in range(1, nr - 1):
        ri = r[i]
        a[i-1] = -alpha * (1 - 1 / (2 * ri))
        b[i] = 1 + 2 * alpha
        c[i] = -alpha * (1 + 1 / (2 * ri))
    # Neumann at r=0.5
    b[0] = 1 + 3 * dr
    c[0] = -1
    d[0] = 0
    # Dirichlet at r=1
    b[-1] = 1
    a[-1] = 0
    d[-1] = 100 + 40 * t[j+1]
    T_bwd[j+1] = solve_tridiagonal(a, b, c, d)

# ---- CRANK-NICOLSON METHOD ----
T_cn = np.zeros((nt, nr))
T_cn[0] = T0.copy()
for j in range(nt - 1):
    a = np.zeros(nr - 1)
    b = np.zeros(nr)
    c = np.zeros(nr - 1)
    d = np.zeros(nr)
    for i in range(1, nr - 1):
        ri = r[i]
        a[i-1] = -alpha/2 * (1 - 1 / (2 * ri))
        b[i] = 1 + alpha
        c[i] = -alpha/2 * (1 + 1 / (2 * ri))
        d[i] = (
            (alpha / 2 * (1 + 1 / (2 * ri)) * T_cn[j, i+1]) +
            (1 - alpha) * T_cn[j, i] +
            (alpha / 2 * (1 - 1 / (2 * ri)) * T_cn[j, i-1])
        )
    b[0] = 1 + 3 * dr
    c[0] = -1
    d[0] = 0
    b[-1] = 1
    a[-1] = 0
    d[-1] = 100 + 40 * t[j+1]
    T_cn[j+1] = solve_tridiagonal(a, b, c, d)

# ---- Print Final Result at t=10 ----
print("\n=== T(r, t=10) FORWARD ===")
print(np.round(T_fwd[-1], 6))

print("\n=== T(r, t=10) BACKWARD ===")
print(np.round(T_bwd[-1], 6))

print("\n=== T(r, t=10) CRANK-NICOLSON ===")
print(np.round(T_cn[-1], 6))
