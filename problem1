import numpy as np

# Mesh & params
pi = np.pi
h = 0.1 * pi
nx = int(pi / h) + 1
ny = int((pi / 2) / h) + 1
x = np.linspace(0, pi, nx)
y = np.linspace(0, pi/2, ny)

u = np.zeros((nx, ny))

# Apply boundary conditions
u[0, :] = np.cos(y)         # u(0, y)
u[-1, :] = -np.cos(y)       # u(pi, y)
u[:, 0] = np.cos(x)         # u(x, 0)
u[:, -1] = 0                # u(x, pi/2)

# Right-hand side f(x,y) = x*y
X, Y = np.meshgrid(x, y, indexing='ij')
f = X * Y

# Jacobi Iteration
tol = 1e-5
max_iter = 10000
u_new = u.copy()
iteration = 0
error = 1.0

while error > tol and iteration < max_iter:
    for i in range(1, nx-1):
        for j in range(1, ny-1):
            u_new[i, j] = 0.25 * (
                u[i+1, j] + u[i-1, j] + u[i, j+1] + u[i, j-1] - h**2 * f[i, j]
            )
    error = np.max(np.abs(u_new - u))
    u[:, :] = u_new
    iteration += 1

# Final Result
print(f"\n=== u(x,y) at interior nodes after {iteration} iterations ===")
for i in range(1, nx-1):
    for j in range(1, ny-1):
        print(f"u({x[i]:.2f}, {y[j]:.2f}) = {u[i, j]:.6f}")
